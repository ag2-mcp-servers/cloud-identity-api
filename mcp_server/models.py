# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:13:29+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AddIdpCredentialOperationMetadata(BaseModel):
    pass


class AddIdpCredentialRequest(BaseModel):
    pemData: Optional[str] = Field(
        None,
        description='PEM encoded x509 certificate containing the public key for verifying IdP signatures.',
    )


class OwnershipPrivilege(Enum):
    OWNERSHIP_PRIVILEGE_UNSPECIFIED = 'OWNERSHIP_PRIVILEGE_UNSPECIFIED'
    DEVICE_ADMINISTRATOR = 'DEVICE_ADMINISTRATOR'
    PROFILE_OWNER = 'PROFILE_OWNER'
    DEVICE_OWNER = 'DEVICE_OWNER'


class AndroidAttributes(BaseModel):
    enabledUnknownSources: Optional[bool] = Field(
        None,
        description='Whether applications from unknown sources can be installed on device.',
    )
    ownerProfileAccount: Optional[bool] = Field(
        None,
        description='Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.',
    )
    ownershipPrivilege: Optional[OwnershipPrivilege] = Field(
        None, description='Ownership privileges on device.'
    )
    supportsWorkProfile: Optional[bool] = Field(
        None,
        description='Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.',
    )


class ApproveDeviceUserRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description="Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
    )


class BlockDeviceUserRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description="Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
    )


class CancelUserInvitationRequest(BaseModel):
    pass


class CancelWipeDeviceRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description="Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
    )


class CancelWipeDeviceUserRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description="Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
    )


class ValidationState(Enum):
    CERTIFICATE_VALIDATION_STATE_UNSPECIFIED = (
        'CERTIFICATE_VALIDATION_STATE_UNSPECIFIED'
    )
    VALIDATION_SUCCESSFUL = 'VALIDATION_SUCCESSFUL'
    VALIDATION_FAILED = 'VALIDATION_FAILED'


class CertificateTemplate(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The template id of the template. Example: "1.3.6.1.4.1.311.21.8.15608621.11768144.5720724.16068415.6889630.81.2472537.7784047".',
    )
    majorVersion: Optional[int] = Field(
        None, description='The Major version of the template. Example: 100.'
    )
    minorVersion: Optional[int] = Field(
        None, description='The minor version of the template. Example: 12.'
    )


class CheckTransitiveMembershipResponse(BaseModel):
    hasMembership: Optional[bool] = Field(
        None,
        description='Response does not include the possible roles of a member since the behavior of this rpc is not all-or-nothing unlike the other rpcs. So, it may not be possible to list all the roles definitively, due to possible lack of authorization in some of the paths.',
    )


class ComplianceState(Enum):
    COMPLIANCE_STATE_UNSPECIFIED = 'COMPLIANCE_STATE_UNSPECIFIED'
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'


class HealthScore(Enum):
    HEALTH_SCORE_UNSPECIFIED = 'HEALTH_SCORE_UNSPECIFIED'
    VERY_POOR = 'VERY_POOR'
    POOR = 'POOR'
    NEUTRAL = 'NEUTRAL'
    GOOD = 'GOOD'
    VERY_GOOD = 'VERY_GOOD'


class Managed(Enum):
    MANAGED_STATE_UNSPECIFIED = 'MANAGED_STATE_UNSPECIFIED'
    MANAGED = 'MANAGED'
    UNMANAGED = 'UNMANAGED'


class OwnerType(Enum):
    OWNER_TYPE_UNSPECIFIED = 'OWNER_TYPE_UNSPECIFIED'
    OWNER_TYPE_CUSTOMER = 'OWNER_TYPE_CUSTOMER'
    OWNER_TYPE_PARTNER = 'OWNER_TYPE_PARTNER'


class CreateInboundSamlSsoProfileOperationMetadata(BaseModel):
    pass


class CreateInboundSsoAssignmentOperationMetadata(BaseModel):
    pass


class CustomAttributeValue(BaseModel):
    boolValue: Optional[bool] = Field(None, description='Represents a boolean value.')
    numberValue: Optional[float] = Field(None, description='Represents a double value.')
    stringValue: Optional[str] = Field(None, description='Represents a string value.')


class DeleteIdpCredentialOperationMetadata(BaseModel):
    pass


class DeleteInboundSamlSsoProfileOperationMetadata(BaseModel):
    pass


class DeleteInboundSsoAssignmentOperationMetadata(BaseModel):
    pass


class ClientType(Enum):
    CLIENT_TYPE_UNSPECIFIED = 'CLIENT_TYPE_UNSPECIFIED'
    DRIVE_FS = 'DRIVE_FS'
    FUNDAMENTAL = 'FUNDAMENTAL'
    ENDPOINT_VERIFICATION = 'ENDPOINT_VERIFICATION'
    WINDOWS_ADVANCED = 'WINDOWS_ADVANCED'
    GOOGLE_CREDENTIALS_PROVIDER_FOR_WINDOWS = 'GOOGLE_CREDENTIALS_PROVIDER_FOR_WINDOWS'


class CompromisedState(Enum):
    COMPROMISED_STATE_UNSPECIFIED = 'COMPROMISED_STATE_UNSPECIFIED'
    COMPROMISED = 'COMPROMISED'
    UNCOMPROMISED = 'UNCOMPROMISED'


class DeviceType(Enum):
    DEVICE_TYPE_UNSPECIFIED = 'DEVICE_TYPE_UNSPECIFIED'
    ANDROID = 'ANDROID'
    IOS = 'IOS'
    GOOGLE_SYNC = 'GOOGLE_SYNC'
    WINDOWS = 'WINDOWS'
    MAC_OS = 'MAC_OS'
    LINUX = 'LINUX'
    CHROME_OS = 'CHROME_OS'


class EncryptionState(Enum):
    ENCRYPTION_STATE_UNSPECIFIED = 'ENCRYPTION_STATE_UNSPECIFIED'
    UNSUPPORTED_BY_DEVICE = 'UNSUPPORTED_BY_DEVICE'
    ENCRYPTED = 'ENCRYPTED'
    NOT_ENCRYPTED = 'NOT_ENCRYPTED'


class ManagementState(Enum):
    MANAGEMENT_STATE_UNSPECIFIED = 'MANAGEMENT_STATE_UNSPECIFIED'
    APPROVED = 'APPROVED'
    BLOCKED = 'BLOCKED'
    PENDING = 'PENDING'
    UNPROVISIONED = 'UNPROVISIONED'
    WIPING = 'WIPING'
    WIPED = 'WIPED'


class OwnerType1(Enum):
    DEVICE_OWNERSHIP_UNSPECIFIED = 'DEVICE_OWNERSHIP_UNSPECIFIED'
    COMPANY = 'COMPANY'
    BYOD = 'BYOD'


class CompromisedState1(Enum):
    COMPROMISED_STATE_UNSPECIFIED = 'COMPROMISED_STATE_UNSPECIFIED'
    COMPROMISED = 'COMPROMISED'
    NOT_COMPROMISED = 'NOT_COMPROMISED'


class ManagementState1(Enum):
    MANAGEMENT_STATE_UNSPECIFIED = 'MANAGEMENT_STATE_UNSPECIFIED'
    WIPING = 'WIPING'
    WIPED = 'WIPED'
    APPROVED = 'APPROVED'
    BLOCKED = 'BLOCKED'
    PENDING_APPROVAL = 'PENDING_APPROVAL'
    UNENROLLED = 'UNENROLLED'


class PasswordState(Enum):
    PASSWORD_STATE_UNSPECIFIED = 'PASSWORD_STATE_UNSPECIFIED'
    PASSWORD_SET = 'PASSWORD_SET'
    PASSWORD_NOT_SET = 'PASSWORD_NOT_SET'


class DeviceUser(BaseModel):
    compromisedState: Optional[CompromisedState1] = Field(
        None, description='Compromised State of the DeviceUser object'
    )
    createTime: Optional[str] = Field(
        None, description='When the user first signed in to the device'
    )
    firstSyncTime: Optional[str] = Field(
        None,
        description='Output only. Most recent time when user registered with this service.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Output only. Default locale used on device, in IETF BCP-47 format.',
    )
    lastSyncTime: Optional[str] = Field(
        None, description='Output only. Last time when user synced with policies.'
    )
    managementState: Optional[ManagementState1] = Field(
        None, description='Output only. Management state of the user on the device.'
    )
    name: Optional[str] = Field(
        None,
        description="Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where `device_user_id` uniquely identifies a user's use of a device.",
    )
    passwordState: Optional[PasswordState] = Field(
        None, description='Password state of the DeviceUser object'
    )
    userAgent: Optional[str] = Field(
        None, description='Output only. User agent on the device for this specific user'
    )
    userEmail: Optional[str] = Field(
        None, description='Email address of the user registered on the device.'
    )


class DsaPublicKeyInfo(BaseModel):
    keySize: Optional[int] = Field(
        None, description='Key size in bits (size of parameter P).'
    )


class ResourceType(Enum):
    RESOURCE_TYPE_UNSPECIFIED = 'RESOURCE_TYPE_UNSPECIFIED'
    USER = 'USER'


class DynamicGroupQuery(BaseModel):
    query: Optional[str] = Field(
        None,
        description="Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`",
    )
    resourceType: Optional[ResourceType] = None


class Status(Enum):
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    UP_TO_DATE = 'UP_TO_DATE'
    UPDATING_MEMBERSHIPS = 'UPDATING_MEMBERSHIPS'
    INVALID_QUERY = 'INVALID_QUERY'


class DynamicGroupStatus(BaseModel):
    status: Optional[Status] = Field(None, description='Status of the dynamic group.')
    statusTime: Optional[str] = Field(
        None,
        description='The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.',
    )


class EntityKey(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The ID of the entity. For Google-managed entities, the `id` must be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.",
    )
    namespace: Optional[str] = Field(
        None,
        description='The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.',
    )


class ExpiryDetail(BaseModel):
    expireTime: Optional[str] = Field(
        None, description='The time at which the `MembershipRole` will expire.'
    )


class GoogleAppsCloudidentityDevicesV1AndroidAttributes(BaseModel):
    enabledUnknownSources: Optional[bool] = Field(
        None,
        description='Whether applications from unknown sources can be installed on device.',
    )
    ownerProfileAccount: Optional[bool] = Field(
        None,
        description='Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.',
    )
    ownershipPrivilege: Optional[OwnershipPrivilege] = Field(
        None, description='Ownership privileges on device.'
    )
    supportsWorkProfile: Optional[bool] = Field(
        None,
        description='Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.',
    )


class GoogleAppsCloudidentityDevicesV1ApproveDeviceUserMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1BlockDeviceUserMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1CancelWipeDeviceMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserMetadata(BaseModel):
    pass


class OwnerType2(Enum):
    OWNER_TYPE_UNSPECIFIED = 'OWNER_TYPE_UNSPECIFIED'
    OWNER_TYPE_CUSTOMER = 'OWNER_TYPE_CUSTOMER'
    OWNER_TYPE_PARTNER = 'OWNER_TYPE_PARTNER'


class GoogleAppsCloudidentityDevicesV1CreateDeviceMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1CustomAttributeValue(BaseModel):
    boolValue: Optional[bool] = Field(None, description='Represents a boolean value.')
    numberValue: Optional[float] = Field(None, description='Represents a double value.')
    stringValue: Optional[str] = Field(None, description='Represents a string value.')


class GoogleAppsCloudidentityDevicesV1DeleteDeviceMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1DeleteDeviceUserMetadata(BaseModel):
    pass


class CompromisedState2(Enum):
    COMPROMISED_STATE_UNSPECIFIED = 'COMPROMISED_STATE_UNSPECIFIED'
    COMPROMISED = 'COMPROMISED'
    UNCOMPROMISED = 'UNCOMPROMISED'


class ManagementState2(Enum):
    MANAGEMENT_STATE_UNSPECIFIED = 'MANAGEMENT_STATE_UNSPECIFIED'
    APPROVED = 'APPROVED'
    BLOCKED = 'BLOCKED'
    PENDING = 'PENDING'
    UNPROVISIONED = 'UNPROVISIONED'
    WIPING = 'WIPING'
    WIPED = 'WIPED'


class OwnerType3(Enum):
    DEVICE_OWNERSHIP_UNSPECIFIED = 'DEVICE_OWNERSHIP_UNSPECIFIED'
    COMPANY = 'COMPANY'
    BYOD = 'BYOD'


class GoogleAppsCloudidentityDevicesV1Device(BaseModel):
    androidSpecificAttributes: Optional[
        GoogleAppsCloudidentityDevicesV1AndroidAttributes
    ] = Field(None, description='Output only. Attributes specific to Android devices.')
    assetTag: Optional[str] = Field(None, description='Asset tag of the device.')
    basebandVersion: Optional[str] = Field(
        None, description='Output only. Baseband version of the device.'
    )
    bootloaderVersion: Optional[str] = Field(
        None, description='Output only. Device bootloader version. Example: 0.6.7.'
    )
    brand: Optional[str] = Field(
        None, description='Output only. Device brand. Example: Samsung.'
    )
    buildNumber: Optional[str] = Field(
        None, description='Output only. Build number of the device.'
    )
    compromisedState: Optional[CompromisedState2] = Field(
        None, description='Output only. Represents whether the Device is compromised.'
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.',
    )
    deviceId: Optional[str] = Field(
        None, description='Unique identifier for the device.'
    )
    deviceType: Optional[DeviceType] = Field(
        None, description='Output only. Type of device.'
    )
    enabledDeveloperOptions: Optional[bool] = Field(
        None, description='Output only. Whether developer options is enabled on device.'
    )
    enabledUsbDebugging: Optional[bool] = Field(
        None, description='Output only. Whether USB debugging is enabled on device.'
    )
    encryptionState: Optional[EncryptionState] = Field(
        None, description='Output only. Device encryption state.'
    )
    imei: Optional[str] = Field(
        None,
        description='Output only. IMEI number of device if GSM device; empty otherwise.',
    )
    kernelVersion: Optional[str] = Field(
        None, description='Output only. Kernel version of the device.'
    )
    lastSyncTime: Optional[str] = Field(
        None, description='Most recent time when device synced with this service.'
    )
    managementState: Optional[ManagementState2] = Field(
        None, description='Output only. Management state of the device'
    )
    manufacturer: Optional[str] = Field(
        None, description='Output only. Device manufacturer. Example: Motorola.'
    )
    meid: Optional[str] = Field(
        None,
        description='Output only. MEID number of device if CDMA device; empty otherwise.',
    )
    model: Optional[str] = Field(
        None, description='Output only. Model name of device. Example: Pixel 3.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique id assigned to the Device.',
    )
    networkOperator: Optional[str] = Field(
        None,
        description='Output only. Mobile or network operator of device, if available.',
    )
    osVersion: Optional[str] = Field(
        None,
        description='Output only. OS version of the device. Example: Android 8.1.0.',
    )
    otherAccounts: Optional[List[str]] = Field(
        None,
        description='Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account\'s domain has only one account. Examples: "com.example", "xyz.com".',
    )
    ownerType: Optional[OwnerType3] = Field(
        None,
        description='Output only. Whether the device is owned by the company or an individual',
    )
    releaseVersion: Optional[str] = Field(
        None, description='Output only. OS release version. Example: 6.0.'
    )
    securityPatchTime: Optional[str] = Field(
        None, description='Output only. OS security patch update time on device.'
    )
    serialNumber: Optional[str] = Field(
        None, description='Serial Number of device. Example: HT82V1A01076.'
    )
    wifiMacAddresses: Optional[List[str]] = Field(
        None, description='WiFi MAC addresses of device.'
    )


class CompromisedState3(Enum):
    COMPROMISED_STATE_UNSPECIFIED = 'COMPROMISED_STATE_UNSPECIFIED'
    COMPROMISED = 'COMPROMISED'
    NOT_COMPROMISED = 'NOT_COMPROMISED'


class ManagementState3(Enum):
    MANAGEMENT_STATE_UNSPECIFIED = 'MANAGEMENT_STATE_UNSPECIFIED'
    WIPING = 'WIPING'
    WIPED = 'WIPED'
    APPROVED = 'APPROVED'
    BLOCKED = 'BLOCKED'
    PENDING_APPROVAL = 'PENDING_APPROVAL'
    UNENROLLED = 'UNENROLLED'


class GoogleAppsCloudidentityDevicesV1DeviceUser(BaseModel):
    compromisedState: Optional[CompromisedState3] = Field(
        None, description='Compromised State of the DeviceUser object'
    )
    createTime: Optional[str] = Field(
        None, description='When the user first signed in to the device'
    )
    firstSyncTime: Optional[str] = Field(
        None,
        description='Output only. Most recent time when user registered with this service.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Output only. Default locale used on device, in IETF BCP-47 format.',
    )
    lastSyncTime: Optional[str] = Field(
        None, description='Output only. Last time when user synced with policies.'
    )
    managementState: Optional[ManagementState3] = Field(
        None, description='Output only. Management state of the user on the device.'
    )
    name: Optional[str] = Field(
        None,
        description="Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device}/deviceUsers/{device_user}`, where `device_user` uniquely identifies a user's use of a device.",
    )
    passwordState: Optional[PasswordState] = Field(
        None, description='Password state of the DeviceUser object'
    )
    userAgent: Optional[str] = Field(
        None, description='Output only. User agent on the device for this specific user'
    )
    userEmail: Optional[str] = Field(
        None, description='Email address of the user registered on the device.'
    )


class GoogleAppsCloudidentityDevicesV1ListEndpointAppsMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1SignoutDeviceUserMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1UpdateClientStateMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1UpdateDeviceMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1WipeDeviceMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1WipeDeviceResponse(BaseModel):
    device: Optional[GoogleAppsCloudidentityDevicesV1Device] = Field(
        None,
        description='Resultant Device object for the action. Note that asset tags will not be returned in the device object.',
    )


class GoogleAppsCloudidentityDevicesV1WipeDeviceUserMetadata(BaseModel):
    pass


class GoogleAppsCloudidentityDevicesV1WipeDeviceUserResponse(BaseModel):
    deviceUser: Optional[GoogleAppsCloudidentityDevicesV1DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class RelationType(Enum):
    RELATION_TYPE_UNSPECIFIED = 'RELATION_TYPE_UNSPECIFIED'
    DIRECT = 'DIRECT'
    INDIRECT = 'INDIRECT'
    DIRECT_AND_INDIRECT = 'DIRECT_AND_INDIRECT'


class SsoMode(Enum):
    SSO_MODE_UNSPECIFIED = 'SSO_MODE_UNSPECIFIED'
    SSO_OFF = 'SSO_OFF'
    SAML_SSO = 'SAML_SSO'
    DOMAIN_WIDE_SAML_IF_ENABLED = 'DOMAIN_WIDE_SAML_IF_ENABLED'


class IsInvitableUserResponse(BaseModel):
    isInvitableUser: Optional[bool] = Field(
        None, description='Returns true if the email address is invitable.'
    )


class ListDeviceUsersResponse(BaseModel):
    deviceUsers: Optional[List[DeviceUser]] = Field(
        None, description='Devices meeting the list restrictions.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results. Empty if there are no more results.',
    )


class LookupGroupNameResponse(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the looked-up `Group`.',
    )


class LookupMembershipNameResponse(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The [resource name](https://cloud.google.com/apis/design/resource_names) of the looked-up `Membership`. Must be of the form `groups/{group_id}/memberships/{membership_id}`.',
    )


class LookupSelfDeviceUsersResponse(BaseModel):
    customer: Optional[str] = Field(
        None,
        description='The customer Id that may be passed back to other Devices API methods such as List, Get, etc.',
    )
    names: Optional[List[str]] = Field(
        None,
        description='[Resource names](https://cloud.google.com/apis/design/resource_names) of the DeviceUsers in the format: `devices/{device_id}/deviceUsers/{user_resource_id}`, where device_id is the unique ID assigned to a Device and user_resource_id is the unique user ID',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results. Empty if there are no more results.',
    )


class DeliverySetting(Enum):
    DELIVERY_SETTING_UNSPECIFIED = 'DELIVERY_SETTING_UNSPECIFIED'
    ALL_MAIL = 'ALL_MAIL'
    DIGEST = 'DIGEST'
    DAILY = 'DAILY'
    NONE = 'NONE'
    DISABLED = 'DISABLED'


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    USER = 'USER'
    SERVICE_ACCOUNT = 'SERVICE_ACCOUNT'
    GROUP = 'GROUP'
    SHARED_DRIVE = 'SHARED_DRIVE'
    OTHER = 'OTHER'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    COMPLIANT = 'COMPLIANT'
    FORWARD_COMPLIANT = 'FORWARD_COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'
    EVALUATING = 'EVALUATING'


class MembershipRoleRestrictionEvaluation(BaseModel):
    state: Optional[State] = Field(
        None, description='Output only. The current state of the restriction'
    )


class MoveOrgMembershipRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description='Required. Immutable. Customer on whose membership change is made. All authorization will happen on the role assignments of this customer. Format: customers/{$customerId} where `$customerId` is the `id` from the [Admin SDK `Customer` resource](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers). You may also use `customers/my_customer` to specify your own organization.',
    )
    destinationOrgUnit: Optional[str] = Field(
        None,
        description='Required. Immutable. OrgUnit where the membership will be moved to. Format: orgUnits/{$orgUnitId} where `$orgUnitId` is the `orgUnitId` from the [Admin SDK `OrgUnit` resource](https://developers.google.com/admin-sdk/directory/reference/rest/v1/orgunits).',
    )


class Type1(Enum):
    ENTITY_TYPE_UNSPECIFIED = 'ENTITY_TYPE_UNSPECIFIED'
    SHARED_DRIVE = 'SHARED_DRIVE'


class OrgMembership(BaseModel):
    member: Optional[str] = Field(
        None,
        description='Immutable. Org member id as full resource name. Format for shared drive resource: //drive.googleapis.com/drives/{$memberId} where `$memberId` is the `id` from [Drive API (V3) `Drive` resource](https://developers.google.com/drive/api/v3/reference/drives#resource).',
    )
    memberUri: Optional[str] = Field(
        None,
        description='Uri with which you can read the member. This follows https://aip.dev/122 Format for shared drive resource: https://drive.googleapis.com/drive/v3/drives/{$memberId} where `$memberId` is the `id` from [Drive API (V3) `Drive` resource](https://developers.google.com/drive/api/v3/reference/drives#resource).',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Immutable. The [resource name](https://cloud.google.com/apis/design/resource_names) of the OrgMembership. Format: orgUnits/{$orgUnitId}/memberships/{$membership} The `$orgUnitId` is the `orgUnitId` from the [Admin SDK `OrgUnit` resource](https://developers.google.com/admin-sdk/directory/reference/rest/v1/orgunits). The `$membership` shall be of the form `{$entityType};{$memberId}`, where `$entityType` is the enum value of [OrgMembership.EntityType], and `memberId` is the `id` from [Drive API (V3) `Drive` resource](https://developers.google.com/drive/api/v3/reference/drives#resource) for OrgMembership.EntityType.SHARED_DRIVE.',
    )
    type: Optional[Type1] = Field(
        None, description='Immutable. Entity type for the org member.'
    )


class PosixGroup(BaseModel):
    gid: Optional[str] = Field(None, description='GID of the POSIX group.')
    name: Optional[str] = Field(None, description='Name of the POSIX group.')
    systemId: Optional[str] = Field(
        None,
        description='System identifier for which group name and gid apply to. If not specified it will default to empty value.',
    )


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    EVALUATING = 'EVALUATING'
    COMPLIANT = 'COMPLIANT'
    FORWARD_COMPLIANT = 'FORWARD_COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'


class RestrictionEvaluation(BaseModel):
    state: Optional[State1] = Field(
        None, description='Output only. The current state of the restriction'
    )


class RestrictionEvaluations(BaseModel):
    memberRestrictionEvaluation: Optional[MembershipRoleRestrictionEvaluation] = Field(
        None,
        description='Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.',
    )


class RsaPublicKeyInfo(BaseModel):
    keySize: Optional[int] = Field(
        None, description='Key size in bits (size of the modulus).'
    )


class SamlIdpConfig(BaseModel):
    changePasswordUri: Optional[str] = Field(
        None,
        description='The **Change Password URL** of the identity provider. Users will be sent to this URL when changing their passwords at `myaccount.google.com`. This takes precedence over the change password URL configured at customer-level. Must use `HTTPS`.',
    )
    entityId: Optional[str] = Field(
        None, description='Required. The SAML **Entity ID** of the identity provider.'
    )
    logoutRedirectUri: Optional[str] = Field(
        None,
        description='The **Logout Redirect URL** (sign-out page URL) of the identity provider. When a user clicks the sign-out link on a Google page, they will be redirected to this URL. This is a pure redirect with no attached SAML `LogoutRequest` i.e. SAML single logout is not supported. Must use `HTTPS`.',
    )
    singleSignOnServiceUri: Optional[str] = Field(
        None,
        description='Required. The `SingleSignOnService` endpoint location (sign-in page URL) of the identity provider. This is the URL where the `AuthnRequest` will be sent. Must use `HTTPS`. Assumed to accept the `HTTP-Redirect` binding.',
    )


class SamlSpConfig(BaseModel):
    assertionConsumerServiceUri: Optional[str] = Field(
        None,
        description='Output only. The SAML **Assertion Consumer Service (ACS) URL** to be used for the IDP-initiated login. Assumed to accept response messages via the `HTTP-POST` binding.',
    )
    entityId: Optional[str] = Field(
        None,
        description='Output only. The SAML **Entity ID** for this service provider.',
    )


class SamlSsoInfo(BaseModel):
    inboundSamlSsoProfile: Optional[str] = Field(
        None,
        description='Required. Name of the `InboundSamlSsoProfile` to use. Must be of the form `inboundSamlSsoProfiles/{inbound_saml_sso_profile}`. ',
    )


class SendUserInvitationRequest(BaseModel):
    pass


class RedirectCondition(Enum):
    REDIRECT_CONDITION_UNSPECIFIED = 'REDIRECT_CONDITION_UNSPECIFIED'
    NEVER = 'NEVER'


class SignInBehavior(BaseModel):
    redirectCondition: Optional[RedirectCondition] = Field(
        None, description='When to redirect sign-ins to the IdP.'
    )


class StatusModel(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TransitiveMembershipRole(BaseModel):
    role: Optional[str] = Field(
        None,
        description='TransitiveMembershipRole in string format. Currently supported TransitiveMembershipRoles: `"MEMBER"`, `"OWNER"`, and `"MANAGER"`.',
    )


class UpdateInboundSamlSsoProfileOperationMetadata(BaseModel):
    pass


class UpdateInboundSsoAssignmentOperationMetadata(BaseModel):
    pass


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    NOT_YET_SENT = 'NOT_YET_SENT'
    INVITED = 'INVITED'
    ACCEPTED = 'ACCEPTED'
    DECLINED = 'DECLINED'


class UserInvitation(BaseModel):
    mailsSentCount: Optional[str] = Field(
        None, description='Number of invitation emails sent to the user.'
    )
    name: Optional[str] = Field(
        None,
        description='Shall be of the form `customers/{customer}/userinvitations/{user_email_address}`.',
    )
    state: Optional[State2] = Field(None, description='State of the `UserInvitation`.')
    updateTime: Optional[str] = Field(
        None, description='Time when the `UserInvitation` was last updated.'
    )


class WipeDeviceRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description="Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
    )
    removeResetLock: Optional[bool] = Field(
        None,
        description='Optional. Specifies if a user is able to factory reset a device after a Device Wipe. On iOS, this is called "Activation Lock", while on Android, this is known as "Factory Reset Protection". If true, this protection will be removed from the device, so that a user can successfully factory reset. If false, the setting is untouched on the device.',
    )


class WipeDeviceUserRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description="Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
    )


class WipeDeviceUserResponse(BaseModel):
    deviceUser: Optional[DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class View(Enum):
    VIEW_UNSPECIFIED = 'VIEW_UNSPECIFIED'
    COMPANY_INVENTORY = 'COMPANY_INVENTORY'
    USER_ASSIGNED_DEVICES = 'USER_ASSIGNED_DEVICES'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View2(Enum):
    VIEW_UNSPECIFIED = 'VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class InitialGroupConfig(Enum):
    INITIAL_GROUP_CONFIG_UNSPECIFIED = 'INITIAL_GROUP_CONFIG_UNSPECIFIED'
    WITH_INITIAL_OWNER = 'WITH_INITIAL_OWNER'
    EMPTY = 'EMPTY'


class View4(Enum):
    BASIC = 'BASIC'
    FULL = 'FULL'


class PageSize(Enum):
    BASIC = 'BASIC'
    FULL = 'FULL'


class ApproveDeviceUserResponse(BaseModel):
    deviceUser: Optional[DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class BlockDeviceUserResponse(BaseModel):
    deviceUser: Optional[DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class CancelWipeDeviceUserResponse(BaseModel):
    deviceUser: Optional[DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class CertificateAttributes(BaseModel):
    certificateTemplate: Optional[CertificateTemplate] = Field(
        None, description='The X.509 extension for CertificateTemplate.'
    )
    fingerprint: Optional[str] = Field(
        None, description='The encoded certificate fingerprint.'
    )
    issuer: Optional[str] = Field(
        None, description='The name of the issuer of this certificate.'
    )
    serialNumber: Optional[str] = Field(
        None, description='Serial number of the certificate, Example: "123456789".'
    )
    subject: Optional[str] = Field(
        None, description='The subject name of this certificate.'
    )
    thumbprint: Optional[str] = Field(None, description='The certificate thumbprint.')
    validationState: Optional[ValidationState] = Field(
        None, description='Validation state of this certificate.'
    )
    validityExpirationTime: Optional[str] = Field(
        None, description='Certificate not valid at or after this timestamp.'
    )
    validityStartTime: Optional[str] = Field(
        None, description='Certificate not valid before this timestamp.'
    )


class ClientState(BaseModel):
    assetTags: Optional[List[str]] = Field(
        None, description='The caller can specify asset tags for this resource'
    )
    complianceState: Optional[ComplianceState] = Field(
        None,
        description='The compliance state of the resource as specified by the API client.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the client state data was created.'
    )
    customId: Optional[str] = Field(
        None,
        description='This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field.',
    )
    etag: Optional[str] = Field(
        None,
        description='The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest',
    )
    healthScore: Optional[HealthScore] = Field(
        None, description='The Health score of the resource'
    )
    keyValuePairs: Optional[Dict[str, CustomAttributeValue]] = Field(
        None,
        description='The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.',
    )
    lastUpdateTime: Optional[str] = Field(
        None,
        description='Output only. The time the client state data was last updated.',
    )
    managed: Optional[Managed] = Field(
        None,
        description='The management state of the resource as specified by the API client.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`, where partner_id corresponds to the partner storing the data.',
    )
    ownerType: Optional[OwnerType] = Field(
        None, description='Output only. The owner of the ClientState'
    )
    scoreReason: Optional[str] = Field(
        None, description='A descriptive cause of the health score.'
    )


class DynamicGroupMetadata(BaseModel):
    queries: Optional[List[DynamicGroupQuery]] = Field(
        None,
        description='Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.',
    )
    status: Optional[DynamicGroupStatus] = Field(
        None, description='Output only. Status of the dynamic group.'
    )


class EndpointVerificationSpecificAttributes(BaseModel):
    certificateAttributes: Optional[List[CertificateAttributes]] = Field(
        None, description='Details of certificates.'
    )


class GoogleAppsCloudidentityDevicesV1ApproveDeviceUserResponse(BaseModel):
    deviceUser: Optional[GoogleAppsCloudidentityDevicesV1DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class GoogleAppsCloudidentityDevicesV1BlockDeviceUserResponse(BaseModel):
    deviceUser: Optional[GoogleAppsCloudidentityDevicesV1DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class GoogleAppsCloudidentityDevicesV1CancelWipeDeviceResponse(BaseModel):
    device: Optional[GoogleAppsCloudidentityDevicesV1Device] = Field(
        None,
        description='Resultant Device object for the action. Note that asset tags will not be returned in the device object.',
    )


class GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserResponse(BaseModel):
    deviceUser: Optional[GoogleAppsCloudidentityDevicesV1DeviceUser] = Field(
        None, description='Resultant DeviceUser object for the action.'
    )


class GoogleAppsCloudidentityDevicesV1ClientState(BaseModel):
    assetTags: Optional[List[str]] = Field(
        None, description='The caller can specify asset tags for this resource'
    )
    complianceState: Optional[ComplianceState] = Field(
        None,
        description='The compliance state of the resource as specified by the API client.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the client state data was created.'
    )
    customId: Optional[str] = Field(
        None,
        description='This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field.',
    )
    etag: Optional[str] = Field(
        None,
        description='The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest',
    )
    healthScore: Optional[HealthScore] = Field(
        None,
        description='The Health score of the resource. The Health score is the callers specification of the condition of the device from a usability point of view. For example, a third-party device management provider may specify a health score based on its compliance with organizational policies.',
    )
    keyValuePairs: Optional[
        Dict[str, GoogleAppsCloudidentityDevicesV1CustomAttributeValue]
    ] = Field(
        None,
        description='The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.',
    )
    lastUpdateTime: Optional[str] = Field(
        None,
        description='Output only. The time the client state data was last updated.',
    )
    managed: Optional[Managed] = Field(
        None,
        description='The management state of the resource as specified by the API client.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device}/deviceUsers/{device_user}/clientState/{partner}`, where partner corresponds to the partner storing the data. For partners belonging to the "BeyondCorp Alliance", this is the partner ID specified to you by Google. For all other callers, this is a string of the form: `{customer}-suffix`, where `customer` is your customer ID. The *suffix* is any string the caller specifies. This string will be displayed verbatim in the administration console. This suffix is used in setting up Custom Access Levels in Context-Aware Access. Your organization\'s customer ID can be obtained from the URL: `GET https://www.googleapis.com/admin/directory/v1/customers/my_customer` The `id` field in the response contains the customer ID starting with the letter \'C\'. The customer ID to be used in this API is the string after the letter \'C\' (not including \'C\')',
    )
    ownerType: Optional[OwnerType2] = Field(
        None, description='Output only. The owner of the ClientState'
    )
    scoreReason: Optional[str] = Field(
        None, description='A descriptive cause of the health score.'
    )


class Group(BaseModel):
    additionalGroupKeys: Optional[List[EntityKey]] = Field(
        None,
        description='Output only. Additional group keys associated with the Group.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the `Group` was created.'
    )
    description: Optional[str] = Field(
        None,
        description='An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.',
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the `Group`.'
    )
    dynamicGroupMetadata: Optional[DynamicGroupMetadata] = Field(
        None, description='Optional. Dynamic group metadata like queries and status.'
    )
    groupKey: Optional[EntityKey] = Field(
        None, description='Required. The `EntityKey` of the `Group`.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.',
    )
    parent: Optional[str] = Field(
        None,
        description='Required. Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external [identity-mapped groups](https://support.google.com/a/answer/9039510) or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with "C" (for example, \'C046psxkn\'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)',
    )
    posixGroups: Optional[List[PosixGroup]] = Field(
        None, description='Optional. The POSIX groups associated with the `Group`.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the `Group` was last updated.'
    )


class GroupRelation(BaseModel):
    displayName: Optional[str] = Field(None, description='Display name for this group.')
    group: Optional[str] = Field(None, description='Resource name for this group.')
    groupKey: Optional[EntityKey] = Field(
        None,
        description='Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Labels for Group resource.'
    )
    relationType: Optional[RelationType] = Field(
        None, description='The relation between the member and the transitive group.'
    )
    roles: Optional[List[TransitiveMembershipRole]] = Field(
        None, description='Membership roles of the member for the group.'
    )


class IdpCredential(BaseModel):
    dsaKeyInfo: Optional[DsaPublicKeyInfo] = Field(
        None, description='Output only. Information of a DSA public key.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the credential.',
    )
    rsaKeyInfo: Optional[RsaPublicKeyInfo] = Field(
        None, description='Output only. Information of a RSA public key.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the `IdpCredential` was last updated.'
    )


class InboundSamlSsoProfile(BaseModel):
    customer: Optional[str] = Field(
        None, description='Immutable. The customer. For example: `customers/C0123abc`.'
    )
    displayName: Optional[str] = Field(
        None, description='Human-readable name of the SAML SSO profile.'
    )
    idpConfig: Optional[SamlIdpConfig] = Field(
        None, description='SAML identity provider configuration.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the SAML SSO profile.',
    )
    spConfig: Optional[SamlSpConfig] = Field(
        None,
        description='SAML service provider configuration for this SAML SSO profile. These are the service provider details provided by Google that should be configured on the corresponding identity provider.',
    )


class InboundSsoAssignment(BaseModel):
    customer: Optional[str] = Field(
        None, description='Immutable. The customer. For example: `customers/C0123abc`.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Inbound SSO Assignment.',
    )
    rank: Optional[int] = Field(
        None,
        description='Must be zero (which is the default value so it can be omitted) for assignments with `target_org_unit` set and must be greater-than-or-equal-to one for assignments with `target_group` set.',
    )
    samlSsoInfo: Optional[SamlSsoInfo] = Field(
        None,
        description='SAML SSO details. Must be set if and only if `sso_mode` is set to `SAML_SSO`.',
    )
    signInBehavior: Optional[SignInBehavior] = Field(
        None,
        description='Assertions about users assigned to an IdP will always be accepted from that IdP. This controls whether/when Google should redirect a user to the IdP. Unset (defaults) is the recommended configuration.',
    )
    ssoMode: Optional[SsoMode] = Field(None, description='Inbound SSO behavior.')
    targetGroup: Optional[str] = Field(
        None, description='Immutable. Must be of the form `groups/{group}`.'
    )
    targetOrgUnit: Optional[str] = Field(
        None, description='Immutable. Must be of the form `orgUnits/{org_unit}`.'
    )


class ListClientStatesResponse(BaseModel):
    clientStates: Optional[List[ClientState]] = Field(
        None, description='Client states meeting the list restrictions.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results. Empty if there are no more results.',
    )


class ListGroupsResponse(BaseModel):
    groups: Optional[List[Group]] = Field(
        None, description='The `Group` resources under the specified `parent`.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A continuation token to retrieve the next page of results, or empty if there are no more results available.',
    )


class ListIdpCredentialsResponse(BaseModel):
    idpCredentials: Optional[List[IdpCredential]] = Field(
        None, description='The IdpCredentials from the specified InboundSamlSsoProfile.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class ListInboundSamlSsoProfilesResponse(BaseModel):
    inboundSamlSsoProfiles: Optional[List[InboundSamlSsoProfile]] = Field(
        None, description='List of InboundSamlSsoProfiles.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class ListInboundSsoAssignmentsResponse(BaseModel):
    inboundSsoAssignments: Optional[List[InboundSsoAssignment]] = Field(
        None, description='The assignments.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class ListOrgMembershipsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.',
    )
    orgMemberships: Optional[List[OrgMembership]] = Field(
        None, description='The non-vacuous membership in an orgUnit.'
    )


class ListUserInvitationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The token for the next page. If not empty, indicates that there may be more `UserInvitation` resources that match the listing request; this value can be used in a subsequent ListUserInvitationsRequest to get continued results with the current list call.',
    )
    userInvitations: Optional[List[UserInvitation]] = Field(
        None, description='The list of UserInvitation resources.'
    )


class MemberRelation(BaseModel):
    member: Optional[str] = Field(None, description='Resource name for this member.')
    preferredMemberKey: Optional[List[EntityKey]] = Field(
        None,
        description='Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace.',
    )
    relationType: Optional[RelationType] = Field(
        None,
        description='The relation between the group and the transitive membership.',
    )
    roles: Optional[List[TransitiveMembershipRole]] = Field(
        None,
        description='The membership role details (i.e name of role and expiry time).',
    )


class MemberRestriction(BaseModel):
    evaluation: Optional[RestrictionEvaluation] = Field(
        None, description='The evaluated state of this restriction on a group.'
    )
    query: Optional[str] = Field(
        None,
        description='Member Restriction as defined by CEL expression. Supported restrictions are: `member.customer_id` and `member.type`. Valid values for `member.type` are `1`, `2` and `3`. They correspond to USER, SERVICE_ACCOUNT, and GROUP respectively. The value for `member.customer_id` only supports `groupCustomerId()` currently which means the customer id of the group will be used for restriction. Supported operators are `&&`, `||` and `==`, corresponding to AND, OR, and EQUAL. Examples: Allow only service accounts of given customer to be members. `member.type == 2 && member.customer_id == groupCustomerId()` Allow only users or groups to be members. `member.type == 1 || member.type == 3`',
    )


class MembershipRole(BaseModel):
    expiryDetail: Optional[ExpiryDetail] = Field(
        None,
        description='The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.',
    )
    restrictionEvaluations: Optional[RestrictionEvaluations] = Field(
        None,
        description='Evaluations of restrictions applied to parent group on this membership.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[StatusModel] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class SearchGroupsResponse(BaseModel):
    groups: Optional[List[Group]] = Field(
        None, description='The `Group` resources that match the search query.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A continuation token to retrieve the next page of results, or empty if there are no more results available.',
    )


class SearchTransitiveGroupsResponse(BaseModel):
    memberships: Optional[List[GroupRelation]] = Field(
        None, description='List of transitive groups satisfying the query.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results available for listing.',
    )


class SearchTransitiveMembershipsResponse(BaseModel):
    memberships: Optional[List[MemberRelation]] = Field(
        None, description='List of transitive memberships satisfying the query.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results.',
    )


class SecuritySettings(BaseModel):
    memberRestriction: Optional[MemberRestriction] = Field(
        None, description='The Member Restriction value'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the security settings. Shall be of the form `groups/{group_id}/securitySettings`.',
    )


class UpdateMembershipRolesParams(BaseModel):
    fieldMask: Optional[str] = Field(
        None,
        description='The fully-qualified names of fields to update. May only contain the field `expiry_detail.expire_time`.',
    )
    membershipRole: Optional[MembershipRole] = Field(
        None,
        description='The `MembershipRole`s to be updated. Only `MEMBER` `MembershipRoles` can currently be updated. May only contain a `MembershipRole` with `name` `MEMBER`.',
    )


class Device(BaseModel):
    androidSpecificAttributes: Optional[AndroidAttributes] = Field(
        None, description='Output only. Attributes specific to Android devices.'
    )
    assetTag: Optional[str] = Field(None, description='Asset tag of the device.')
    basebandVersion: Optional[str] = Field(
        None, description='Output only. Baseband version of the device.'
    )
    bootloaderVersion: Optional[str] = Field(
        None, description='Output only. Device bootloader version. Example: 0.6.7.'
    )
    brand: Optional[str] = Field(
        None, description='Output only. Device brand. Example: Samsung.'
    )
    buildNumber: Optional[str] = Field(
        None, description='Output only. Build number of the device.'
    )
    clientTypes: Optional[List[ClientType]] = Field(
        None, description='List of the clients the device is reporting to.'
    )
    compromisedState: Optional[CompromisedState] = Field(
        None, description='Output only. Represents whether the Device is compromised.'
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.',
    )
    deviceId: Optional[str] = Field(
        None, description='Unique identifier for the device.'
    )
    deviceType: Optional[DeviceType] = Field(
        None, description='Output only. Type of device.'
    )
    enabledDeveloperOptions: Optional[bool] = Field(
        None, description='Output only. Whether developer options is enabled on device.'
    )
    enabledUsbDebugging: Optional[bool] = Field(
        None, description='Output only. Whether USB debugging is enabled on device.'
    )
    encryptionState: Optional[EncryptionState] = Field(
        None, description='Output only. Device encryption state.'
    )
    endpointVerificationSpecificAttributes: Optional[
        EndpointVerificationSpecificAttributes
    ] = Field(
        None,
        description='Output only. Attributes specific to Endpoint Verification devices.',
    )
    hostname: Optional[str] = Field(None, description='Host name of the device.')
    imei: Optional[str] = Field(
        None,
        description='Output only. IMEI number of device if GSM device; empty otherwise.',
    )
    kernelVersion: Optional[str] = Field(
        None, description='Output only. Kernel version of the device.'
    )
    lastSyncTime: Optional[str] = Field(
        None, description='Most recent time when device synced with this service.'
    )
    managementState: Optional[ManagementState] = Field(
        None, description='Output only. Management state of the device'
    )
    manufacturer: Optional[str] = Field(
        None, description='Output only. Device manufacturer. Example: Motorola.'
    )
    meid: Optional[str] = Field(
        None,
        description='Output only. MEID number of device if CDMA device; empty otherwise.',
    )
    model: Optional[str] = Field(
        None, description='Output only. Model name of device. Example: Pixel 3.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique id assigned to the Device.',
    )
    networkOperator: Optional[str] = Field(
        None,
        description='Output only. Mobile or network operator of device, if available.',
    )
    osVersion: Optional[str] = Field(
        None,
        description='Output only. OS version of the device. Example: Android 8.1.0.',
    )
    otherAccounts: Optional[List[str]] = Field(
        None,
        description='Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account\'s domain has only one account. Examples: "com.example", "xyz.com".',
    )
    ownerType: Optional[OwnerType1] = Field(
        None,
        description='Output only. Whether the device is owned by the company or an individual',
    )
    releaseVersion: Optional[str] = Field(
        None, description='Output only. OS release version. Example: 6.0.'
    )
    securityPatchTime: Optional[str] = Field(
        None, description='Output only. OS security patch update time on device.'
    )
    serialNumber: Optional[str] = Field(
        None, description='Serial Number of device. Example: HT82V1A01076.'
    )
    wifiMacAddresses: Optional[List[str]] = Field(
        None, description='WiFi MAC addresses of device.'
    )


class ListDevicesResponse(BaseModel):
    devices: Optional[List[Device]] = Field(
        None, description='Devices meeting the list restrictions.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results. Empty if there are no more results.',
    )


class Membership(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the `Membership` was created.'
    )
    deliverySetting: Optional[DeliverySetting] = Field(
        None,
        description='Output only. Delivery setting associated with the membership.',
    )
    memberKey: Optional[EntityKey] = Field(
        None,
        description='Immutable. The `EntityKey` of the member. Either `member_key` or `preferred_member_key` must be set when calling MembershipsService.CreateMembership but not both; both shall be set when returned.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.',
    )
    preferredMemberKey: Optional[EntityKey] = Field(
        None,
        description='Required. Immutable. The `EntityKey` of the member. Either `member_key` or `preferred_member_key` must be set when calling MembershipsService.CreateMembership but not both; both shall be set when returned.',
    )
    roles: Optional[List[MembershipRole]] = Field(
        None,
        description='The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.',
    )
    type: Optional[Type] = Field(
        None, description='Output only. The type of the membership.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The time when the `Membership` was last updated.',
    )


class MembershipAdjacencyList(BaseModel):
    edges: Optional[List[Membership]] = Field(
        None,
        description='Each edge contains information about the member that belongs to this group. Note: Fields returned here will help identify the specific Membership resource (e.g name, preferred_member_key and role), but may not be a comprehensive list of all fields.',
    )
    group: Optional[str] = Field(
        None, description='Resource name of the group that the members belong to.'
    )


class MembershipRelation(BaseModel):
    description: Optional[str] = Field(
        None,
        description='An extended description to help users determine the purpose of a `Group`.',
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the `Group`.'
    )
    group: Optional[str] = Field(
        None,
        description='The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.',
    )
    groupKey: Optional[EntityKey] = Field(
        None, description='The `EntityKey` of the `Group`.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value.',
    )
    membership: Optional[str] = Field(
        None,
        description='The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.',
    )
    roles: Optional[List[MembershipRole]] = Field(
        None, description='The `MembershipRole`s that apply to the `Membership`.'
    )


class ModifyMembershipRolesRequest(BaseModel):
    addRoles: Optional[List[MembershipRole]] = Field(
        None,
        description='The `MembershipRole`s to be added. Adding or removing roles in the same request as updating roles is not supported. Must not be set if `update_roles_params` is set.',
    )
    removeRoles: Optional[List[str]] = Field(
        None,
        description='The `name`s of the `MembershipRole`s to be removed. Adding or removing roles in the same request as updating roles is not supported. It is not possible to remove the `MEMBER` `MembershipRole`. If you wish to delete a `Membership`, call MembershipsService.DeleteMembership instead. Must not contain `MEMBER`. Must not be set if `update_roles_params` is set.',
    )
    updateRolesParams: Optional[List[UpdateMembershipRolesParams]] = Field(
        None,
        description='The `MembershipRole`s to be updated. Updating roles in the same request as adding or removing roles is not supported. Must not be set if either `add_roles` or `remove_roles` is set.',
    )


class ModifyMembershipRolesResponse(BaseModel):
    membership: Optional[Membership] = Field(
        None,
        description='The `Membership` resource after modifying its `MembershipRole`s.',
    )


class SearchDirectGroupsResponse(BaseModel):
    memberships: Optional[List[MembershipRelation]] = Field(
        None, description='List of direct groups satisfying the query.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results available for listing.',
    )


class WipeDeviceResponse(BaseModel):
    device: Optional[Device] = Field(
        None,
        description='Resultant Device object for the action. Note that asset tags will not be returned in the device object.',
    )


class CancelWipeDeviceResponse(BaseModel):
    device: Optional[Device] = Field(
        None,
        description='Resultant Device object for the action. Note that asset tags will not be returned in the device object.',
    )


class CreateDeviceRequest(BaseModel):
    customer: Optional[str] = Field(
        None,
        description="Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
    )
    device: Optional[Device] = Field(
        None,
        description='Required. The device to be created. The name field within this device is ignored in the create method. A new name is created by the method, and returned within the response. Only the fields `device_type`, `serial_number` and `asset_tag` (if present) are used to create the device. All other fields are ignored. The `device_type` and `serial_number` fields are required.',
    )


class GetMembershipGraphResponse(BaseModel):
    adjacencyList: Optional[List[MembershipAdjacencyList]] = Field(
        None,
        description="The membership graph's path information represented as an adjacency list.",
    )
    groups: Optional[List[Group]] = Field(
        None,
        description="The resources representing each group in the adjacency list. Each group in this list can be correlated to a 'group' of the MembershipAdjacencyList using the 'name' of the Group resource.",
    )


class ListMembershipsResponse(BaseModel):
    memberships: Optional[List[Membership]] = Field(
        None, description='The `Membership`s under the specified `parent`.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A continuation token to retrieve the next page of results, or empty if there are no more results available.',
    )
